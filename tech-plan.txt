Технический план проекта: Система записи на тренировки
1. Архитектура приложения
1.1. Фронтенд

Технология: Vue 3
Сборщик: Vite
Состояние: Pinia/Vuex
UI-фреймворк: Tailwind CSS (для минималистичного дизайна и быстрой разработки)
Адаптивная верстка: Использование CSS Grid и Flexbox

1.2. Бэкенд

Технология: PHP 8.4 с Symfony фреймворком
API: RESTful API
База данных: MySQL
Кэширование: Redis
Интеграция: Google Sheets API для получения данных о тренировках

1.3. Инфраструктура

Развертывание: Docker-контейнеры
CI/CD: GitHub Actions или GitLab CI
Хостинг: Совместимый с PHP 8.4, MySQL и Redis

2. Структура базы данных
2.1. Таблицы MySQL
trainings

id (INT, AUTO_INCREMENT, PRIMARY KEY)
google_sheet_id (VARCHAR(255)) - идентификатор из Google Sheets
date (DATE)
time (TIME)
title (VARCHAR(255))
slots (INT) - общее количество мест
slots_available (INT) - доступные места
price (DECIMAL(10,2))
created_at (TIMESTAMP)
updated_at (TIMESTAMP)

bookings

id (INT, AUTO_INCREMENT, PRIMARY KEY)
training_id (INT, FOREIGN KEY)
full_name (VARCHAR(255))
email (VARCHAR(255))
phone (VARCHAR(50))
confirmation_token (VARCHAR(255))
status (ENUM('active', 'cancelled', 'completed'))
device_token (VARCHAR(255)) - для идентификации устройства
created_at (TIMESTAMP)
updated_at (TIMESTAMP)

user_sessions

id (INT, AUTO_INCREMENT, PRIMARY KEY)
device_token (VARCHAR(255))
full_name (VARCHAR(255))
email (VARCHAR(255))
phone (VARCHAR(50))
last_visit (TIMESTAMP)
created_at (TIMESTAMP)
updated_at (TIMESTAMP)

3. Основные модули приложения
3.1. Модуль синхронизации с Google Sheets

Планировщик заданий для регулярного обновления данных
Маппинг данных из таблицы в структуру базы данных
Механизм разрешения конфликтов при обновлении
Кэширование данных в Redis для ускорения доступа

3.2. Модуль управления тренировками

API для получения списка тренировок
Фильтрация и сортировка тренировок
Выделение тренировок, на которые пользователь уже записан
Проверка доступности мест

3.3. Модуль бронирования

Форма записи на тренировку
Валидация данных пользователя
Проверка доступности мест в режиме реального времени
Сохранение данных пользователя и бронирования
Отправка подтверждения на email

3.4. Модуль управления пользовательской сессией

Создание и сохранение device_token в cookie
Автозаполнение формы на основе предыдущих данных
Связывание записей на тренировки с устройством пользователя

3.5. Модуль истории и статистики

Отображение истории посещений для пользователя
Отображение предстоящих тренировок
Подготовка данных для будущей визуализации статистики

4. Интерфейсы и взаимодействие с пользователем
4.1. Главная страница

Раздел "Мои тренировки" (для записанных пользователем)
Раздел "Доступные тренировки"
Фильтры по дате, типу тренировки
Адаптивный дизайн для мобильных устройств

4.2. Страница деталей тренировки

Полная информация о тренировке
Информация о доступных местах
Кнопка "Записаться" с формой
Для пользователей, уже записанных на эту тренировку - кнопка "Отменить запись"

4.3. Форма записи

Поля: полное имя, email, телефон, чекбокс подтверждения
Автозаполнение полей для повторных пользователей
Валидация данных на стороне клиента
Индикатор процесса отправки

4.4. Страница истории тренировок

Список посещенных тренировок
Список предстоящих тренировок с возможностью отмены
Подготовка для будущей визуализации статистики

5. API Endpoints
5.1. Тренировки

GET /api/trainings - получение списка всех тренировок
GET /api/trainings/{id} - получение детальной информации о тренировке
GET /api/trainings/user - получение тренировок текущего пользователя (по device_token)
GET /api/trainings/available - получение списка доступных тренировок

5.2. Бронирование

POST /api/bookings - создание новой записи на тренировку
DELETE /api/bookings/{id} - отмена записи на тренировку
GET /api/bookings/history - получение истории посещений

5.3. Пользовательские данные

POST /api/user-data - сохранение данных пользователя для автозаполнения
GET /api/user-data - получение данных пользователя для автозаполнения

6. Планирование разработки
6.1. Фаза 1: Базовая инфраструктура

Настройка окружения разработки (Docker, IDE)
Создание структуры проекта (Symfony + Vue)
Настройка базы данных и миграций
Настройка интеграции с Google Sheets API

6.2. Фаза 2: Бэкенд разработка

Разработка API для получения тренировок
Реализация модуля синхронизации с Google Sheets
Реализация модуля бронирования
Система отправки email-уведомлений

6.3. Фаза 3: Фронтенд разработка

Верстка главной страницы (адаптивный дизайн)
Реализация страницы деталей тренировки
Реализация формы записи с валидацией
Интеграция с бэкендом через API

6.4. Фаза 4: Тестирование и оптимизация

Юнит-тестирование ключевых компонентов
Интеграционное тестирование API
Тестирование на различных устройствах и браузерах
Оптимизация производительности и кэширование

7. Требования к безопасности

Защита от CSRF-атак
Валидация и санитизация всех пользовательских данных
Rate limiting для API
Защита от SQL-инъекций (использование ORM)
Логирование действий для аудита
